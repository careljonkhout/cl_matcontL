function out = fusion_mex_N_75
out{1} = @init;
out{2} = @fusion_dydt_N_75;
out{3} = @fusion_jacobian_N_75;
out{4} = @jacobian_params;
out{5} = [];
out{6} = [];
out{7} = [];
out{8} = [];
out{9} = [];
out{10} = [];% usernorm DV: this is the only difference between
% the standard matcont problem file and the cl_matcontL problem file
out{11}= @x1;
out{12}= @x2;
out{13}= @x3;
out{14}= @x4;
out{15}= @x5;

% Suppress function might not be used warning in this file:
%#ok<*DEFNU>
% Suppress Input argument might be unused warning in this file: 
%#ok<*INUSD>

function y0 = init(a, b,  q_inf)

N=50;
Gamma_inf = -0.8;
D0        = 1.9;
D1        = -1.1;
D2        = 0;
zeta1     = 1.1;
mu1       = 0.05;
epsilon   = 0.05; 
ZS        = 0;
gamma1    = 5/3;
lambdan   = 1.25;
lambdaT   = 1.5;
cn        = 1.1;
cT        = 0.9;



L = 10;
Zguess = 1;

h = makeGrid(N, L, 3, 1e-5);
x = cumsum(h);

Tinf = (gamma1 - 1)* q_inf / Gamma_inf;
T0 = Tinf / (1 + lambdan / (lambdaT * zeta1));
cg = (zeta1*cT - cn) / (1 + zeta1 * lambdaT/lambdan);

D   = @(z) D0 + D1*tanh(z) + D2 * (tanh(z)).^2;
G   = @(z) a - b*(z - ZS) - (z - ZS).^3;
f =@(z) -Tinf / (Gamma_inf * lambdan^2) * (cn + cg) .* D(z) + G(z);
Z0 = fzero(f, Zguess);

De = D(Z0);
Ge = G(Z0);

% Coefficients of Taylor expansion of 1/D(Z)
Dt0 = D(ZS);
Dt1 = 4*D1*(exp(ZS))^2/((exp(ZS))^2+1)^2+8*D2*(exp(ZS))^2*((exp(ZS))^2-1)/((exp(ZS))^2+1)^3;
Dt2 = -4*D1*(exp(ZS))^2*((exp(ZS))^2-1)/((exp(ZS))^2+1)^3+D2*(-8*((exp(ZS))^2-1)^2*(exp(ZS))^2/((exp(ZS))^2+1)^4+16*(exp(ZS))^4/((exp(ZS))^2+1)^4);
Dt3 = (8/3)*D1*(exp(ZS))^2*((exp(ZS))^4-4*(exp(ZS))^2+1)/((exp(ZS))^2+1)^4+D2*((16/3)*((exp(ZS))^2-1)*(exp(ZS))^2*((exp(ZS))^4-4*(exp(ZS))^2+1)/((exp(ZS))^2+1)^5-32*(exp(ZS))^4*((exp(ZS))^2-1)/((exp(ZS))^2+1)^5);

Dt = [Dt3, Dt2, Dt1, Dt0];
DT = De * Ge * Dt;
GT = [-1 0 -b a];
p = GT - DT;

r = roots(p);
r = sort(r);

if ~isreal(r)
    ZL = fzero(G, -1);
    Z = ZL * ones(1, length(x));
else

ZL = r(1);
ind = find(abs(r - Z0) == min(abs(r - Z0)));
if ind == 1
    Z = ZL * ones(1, length(x));
else
    if ind == 2
        Z2 = r(2);
        Z3 = r(3);
    elseif ind == 3
        Z2 = r(3);
        Z3 = r(2);
    end
    z2 = Z2 - ZL;
    z3 = Z3 - ZL;
    c = sqrt(-p(1)/ (1 * mu1));

    k = c * sqrt(z2 * z3);
    qp = sqrt(2*z3 - z2) * ( sqrt(2) * sqrt(2*z3 - z2) + sqrt(3*z3) ) / ((sqrt(2*z3) + sqrt(z2)) * (sqrt(z3) + sqrt(2*z2)));
    qm = sqrt(2*z3 - z2) * ( sqrt(2) * sqrt(2*z3 - z2) - sqrt(3*z3) ) / ((sqrt(2*z3) + sqrt(z2)) * (sqrt(z3) + sqrt(2*z2)));
    Z = r(1) + (r(3) - r(1)) * (qm + 1) ./ (qm + exp(k*x)) * (qp + 1) ./ (qp + exp(-k*x));
end
end

n0 = -Gamma_inf * lambdan / D(Z0);
n = n0 - Gamma_inf * cumsum(1./D(Z) .* h);
T = Tinf + (T0 - Tinf) * (n / n0).^(-zeta1);
U = n .* T / (gamma1 - 1);

x0(1:3:3*(N-1), 1) = n(1:end-1); 
x0(2:3:3*(N-1), 1) = U(1:end-1);
x0(3:3:3*(N-1), 1) = Z(1:end-1);

f =@(t,y) fun_eval(t, y , a, b, q_inf);
[~, Y] = ode15s(f, [0 100], x0);
y0 = Y(end, :)';
% --------------------------------------------------------------------------
function jacp=jacobian_params(t, xxxxx, a, b, q_inf)
jacp=[[0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(3), 0, ]; [0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(6), 0, ]; [0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(9), 0, ]; [0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(12), 0, ]; [0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(15), 0, ]; [0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(18), 0, ]; [0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(21), 0, ]; [0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(24), 0, ]; [0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(27), 0, ]; [0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(30), 0, ]; [0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(33), 0, ]; [0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(36), 0, ]; [0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(39), 0, ]; [0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(42), 0, ]; [0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(45), 0, ]; [0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(48), 0, ]; [0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(51), 0, ]; [0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(54), 0, ]; [0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(57), 0, ]; [0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(60), 0, ]; [0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(63), 0, ]; [0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(66), 0, ]; [0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(69), 0, ]; [0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(72), 0, ]; [0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(75), 0, ]; [0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(78), 0, ]; [0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(81), 0, ]; [0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(84), 0, ]; [0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(87), 0, ]; [0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(90), 0, ]; [0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(93), 0, ]; [0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(96), 0, ]; [0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(99), 0, ]; [0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(102), 0, ]; [0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(105), 0, ]; [0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(108), 0, ]; [0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(111), 0, ]; [0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(114), 0, ]; [0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(117), 0, ]; [0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(120), 0, ]; [0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(123), 0, ]; [0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(126), 0, ]; [0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(129), 0, ]; [0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(132), 0, ]; [0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(135), 0, ]; [0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(138), 0, ]; [0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(141), 0, ]; [0, 0, 0, ]; [0, 0, 0, ]; [20.0000000000000, -20.0000000000000*xxxxx(144), 0, ]; [0, 0, 0, ]; [0, 0, -1.28405346185529*(-1.1808987389983008*xxxxx(142) + 1.1808987389983006*xxxxx(145) + 0.266666666666667/(-1.10000000000000*tanh(-0.35191144262310603*xxxxx(144) + 1.351911442623106*xxxxx(147)) + 1.90000000000000))*(-1.10000000000000*tanh(xxxxx(147)) + 1.90000000000000)/((-0.35191144262310603*xxxxx(142) + 1.351911442623106*xxxxx(145) + 0.311513509275581/(-1.10000000000000*tanh(-0.35191144262310603*xxxxx(144) + 1.351911442623106*xxxxx(147)) + 1.90000000000000))*(0.800000000000000/((-0.35191144262310603*xxxxx(142) + 1.351911442623106*xxxxx(145) + 0.311513509275581/(-1.10000000000000*tanh(-0.35191144262310603*xxxxx(144) + 1.351911442623106*xxxxx(147)) + 1.90000000000000))*(-1.00000000000000*tanh(-0.35191144262310603*xxxxx(144) + 1.351911442623106*xxxxx(147)) + 1.72727272727273)) + 2.5681069237105856)*(-1.50000000000000*tanh(-0.35191144262310603*xxxxx(144) + 1.351911442623106*xxxxx(147)) + 2.59090909090909)) - 2.9507227726717855*xxxxx(145)*(-1.50000000000000*tanh(xxxxx(147)) + 2.59090909090909)/((-0.35191144262310603*xxxxx(142) + 1.351911442623106*xxxxx(145) + 0.311513509275581/(-1.10000000000000*tanh(-0.35191144262310603*xxxxx(144) + 1.351911442623106*xxxxx(147)) + 1.90000000000000))*(0.800000000000000/((-0.35191144262310603*xxxxx(142) + 1.351911442623106*xxxxx(145) + 0.311513509275581/(-1.10000000000000*tanh(-0.35191144262310603*xxxxx(144) + 1.351911442623106*xxxxx(147)) + 1.90000000000000))*(-1.00000000000000*tanh(-0.35191144262310603*xxxxx(144) + 1.351911442623106*xxxxx(147)) + 1.72727272727273)) + 2.5681069237105856)*(-1.50000000000000*tanh(-0.35191144262310603*xxxxx(144) + 1.351911442623106*xxxxx(147)) + 2.59090909090909)) - 0.8560356412368619*((1.50000000000000*tanh(xxxxx(147))^2 - 1.50000000000000)*(-1.1808987389983008*xxxxx(144) + 1.1808987389983006*xxxxx(147))*xxxxx(145) + (-1.1808987389983008*xxxxx(142) + 1.1808987389983006*xxxxx(145) + 0.266666666666667/(-1.10000000000000*tanh(-0.35191144262310603*xxxxx(144) + 1.351911442623106*xxxxx(147)) + 1.90000000000000))*(-1.50000000000000*tanh(xxxxx(147)) + 2.59090909090909))/((-0.35191144262310603*xxxxx(142) + 1.351911442623106*xxxxx(145) + 0.311513509275581/(-1.10000000000000*tanh(-0.35191144262310603*xxxxx(144) + 1.351911442623106*xxxxx(147)) + 1.90000000000000))*(0.800000000000000/((-0.35191144262310603*xxxxx(142) + 1.351911442623106*xxxxx(145) + 0.311513509275581/(-1.10000000000000*tanh(-0.35191144262310603*xxxxx(144) + 1.351911442623106*xxxxx(147)) + 1.90000000000000))*(-1.00000000000000*tanh(-0.35191144262310603*xxxxx(144) + 1.351911442623106*xxxxx(147)) + 1.72727272727273)) + 2.5681069237105856)*(-1.50000000000000*tanh(-0.35191144262310603*xxxxx(144) + 1.351911442623106*xxxxx(147)) + 2.59090909090909)), ]; [20.0000000000000, -20.0000000000000*xxxxx(147), -15.4086415422635/((-0.35191144262310603*xxxxx(142) + 1.351911442623106*xxxxx(145) + 0.311513509275581/(-1.10000000000000*tanh(-0.35191144262310603*xxxxx(144) + 1.351911442623106*xxxxx(147)) + 1.90000000000000))*xxxxx(145)*(0.800000000000000/((-0.35191144262310603*xxxxx(142) + 1.351911442623106*xxxxx(145) + 0.311513509275581/(-1.10000000000000*tanh(-0.35191144262310603*xxxxx(144) + 1.351911442623106*xxxxx(147)) + 1.90000000000000))*(-1.00000000000000*tanh(-0.35191144262310603*xxxxx(144) + 1.351911442623106*xxxxx(147)) + 1.72727272727273)) + 2.5681069237105856)*(-1.50000000000000*tanh(-0.35191144262310603*xxxxx(144) + 1.351911442623106*xxxxx(147)) + 2.59090909090909)), ]; ] ;
% --------------------------------------------------------------------------
function hess = hessians(t, xxxxx, a, b, q_inf)
hess=[];
% --------------------------------------------------------------------------
function hessp = hessians_params(t, xxxxx, a, b, q_inf)
hessp=[];
%---------------------------------------------------------------------------
function d = third_ord_derivatives(t, xxxxx, a, b, q_inf)
d = [];
%---------------------------------------------------------------------------
function d = fourth_ord_derivatives(t, xxxxx, a, b, q_inf)
d = [];
%---------------------------------------------------------------------------
function d = fifth_ord_derivatives(t, xxxxx, a, b, q_inf)
d = [];

function userfun1=x1(t, xxxxx, a, b, q_inf)
	userfun1=0;
function userfun2=x2(t, xxxxx, a, b, q_inf)
	userfun2=0;
function userfun3=x3(t, xxxxx, a, b, q_inf)
	userfun3=0;
function userfun4=x4(t, xxxxx, a, b, q_inf)
	userfun4=0;
function userfun5=x5(t, xxxxx, a, b, q_inf)
	userfun5=0;

function h = makeGrid(N, L, n, hmin)
    x = linspace(0, 1, N+1);
    x = (L - hmin*N)*x.^n;
    h = hmin + diff(x);

function dpdx = dY(h1, h2, Y0, Y1, Y2)
    a2 = (h1 + 2*h2)/(3*h2*(h1 + h2));
    a1 = (h2 - h1)/(3*h1*h2);
    a0 = -(2*h1 + h2)/(3*h1*(h1 + h2));
    dpdx = a2 * Y2 + a1 * Y1 + a0 * Y0;

function ddpdx = ddY(h1, h2, Y0, Y1, Y2)
    a2 = 2/(h2 * (h1 + h2));
    a1 = -2/(h1 * h2);
    a0 = 2/(h1 * (h1 + h2));
    ddpdx = a2 * Y2 + a1 * Y1 + a0 * Y0;

function dpdx = leftdY(h1, h2, Y0, Y1, Y2)
    a2 = -h1 / (h2 * (h1 + h2));
    a1 = (h1 + h2) / (h1 * h2);
    a0 = -(2*h1 + h2) / (h1 * (h1 + h2));
    dpdx = a2 * Y2 + a1 * Y1 + a0 * Y0;

function Y0 = leftdYs(h1, h2, Y1, Y2, dY0)
    a2 = -h1 / (h2 * (h1 + h2));
    a1 = (h1 + h2) / (h1 * h2);
    a0 = -(2*h1 + h2) / (h1 * (h1 + h2));
    Y0 = (dY0 - a2 * Y2 - a1 * Y1) / a0;

function Y0 = leftdYl(h1, h2, Y1, Y2, lambda)
    a2 = -h1 / (h2 * (h1 + h2));
    a1 = (h1 + h2) / (h1 * h2);
    a0 = -(2*h1 + h2) / (h1 * (h1 + h2));
    Y0 = -(a2 * Y2 + a1 * Y1) / (a0 - 1 / lambda);

function Y0 = leftddYz(h1, h2, Y1, Y2)
    a2 = 2/(h2 * (h1 + h2));
    a1 = -2/(h1 * h2);
    a0 = 2/(h1 * (h1 + h2));
    Y0 = -(a2 * Y2 + a1 * Y1) / a0;

function dpdx = rightdY(h1, h2, Y0, Y1, Y2)
    a2 = (2*h2 + h1) / (h2 * (h1 + h2));
    a1 = -(h1 + h2) / (h1 * h2);
    a0 = h2 / (h1 * (h1 + h2));
    dpdx = a2 * Y2 + a1 * Y1 + a0 * Y0;

function YN = rightdYs(h1, h2, Y0, Y1, dYN)
    a2 = (2*h2 + h1) / (h2 * (h1 + h2));
    a1 = -(h1 + h2) / (h1 * h2);
    a0 = h2 / (h1 * (h1 + h2));
    YN = (dYN - a1 * Y1 - a0 * Y0) / a2;

function YN = rightdYsl(h1, h2, Y0, Y1, dYN, lambda)
    a2 = (2*h2 + h1) / (h2 * (h1 + h2));
    a1 = -(h1 + h2) / (h1 * h2);
    a0 = h2 / (h1 * (h1 + h2));
    YN = (dYN - a1 * Y1 - a0 * Y0) / (a2 - 1/lambda);