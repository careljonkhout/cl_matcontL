#include <math.h>
#include "mex.h"

#define n_inputs    5
#define n_outputs   1
#define N           75
#define nzmax       1760

#define input_t     0
#define input_xxxxx 1
#define input_a     2
#define input_b     3
#define input_q_inf 4


void fusion_jacobian(double* xxxxx, double a, double b, double q_inf, double* jacobian);

void mexFunction(int nlhs, mxArray *plhs[],
                 int nrhs, const mxArray *prhs[]) {
    double a,b,q_inf;               /* input scalars */
    double *xxxxx;                  /* input vector  */

    /* check for proper number of arguments */
    if(nrhs != n_inputs) {
        mexErrMsgIdAndTxt("fusion_dydt_125:nrhs","Five inputs required.");
    }
    if(nlhs != n_outputs) {
        mexErrMsgIdAndTxt("fusion_dydt_125:nlhs","One output required.");
    }

    int numel_xxxxx = mxGetNumberOfElements(prhs[input_xxxxx]));

    if( !mxIsDouble(prhs[input_xxxxx]) || numel_xxxxx != 3*(N-1)) {
        mexErrMsgIdAndTxt("fusion_dydt_125:notDouble",
            "Input vector xxxxx must have 222 == 3*(N-1) elements");
    }
	
    /* make sure the input "a" is scalar */
    if( !mxIsDouble(prhs[input_a]) || 
         mxIsComplex(prhs[input_a]) ||
         mxGetNumberOfElements(prhs[input_a])!=1 ) {
        mexErrMsgIdAndTxt("fusion_dydt_125:notScalar","Third arugment 'a' must be a scalar.");
    }

    /* make sure input "b" is scalar */
    if( !mxIsDouble(prhs[input_b]) || 
         mxIsComplex(prhs[input_b]) ||
         mxGetNumberOfElements(prhs[input_b])!=1 ) {
        mexErrMsgIdAndTxt("fusion_dydt_125:notScalar","Fourth argument 'b' must be a scalar.");
    }
    /* make sure the input "q_inf" is scalar */

    if( !mxIsDouble(prhs[input_q_inf]) || 
         mxIsComplex(prhs[input_q_inf]) ||
         mxGetNumberOfElements(prhs[input_q_inf])!=1 ) {
        mexErrMsgIdAndTxt("fusion_dydt_125:notScalar","Fifth argument 'q_inf' must be a scalar.");
    }
    
    /* get the values of the scalar inputs  */
    a     = mxGetScalar(prhs[input_a    ]);
    b     = mxGetScalar(prhs[input_b    ]);
    q_inf = mxGetScalar(prhs[input_q_inf]);

    /* create a pointer to the real data in the input matrix  */
    #if MX_HAS_INTERLEAVED_COMPLEX
    xxxxx = mxGetDoubles(prhs[input_xxxxx]);
    #else
    xxxxx = mxGetPr(prhs[input_xxxxx]);
    #endif

    /* get dimensions of the input matrix */
    //ncols = mxGetN(prhs[input_xxxxx]);

    /* create the sparse output matrix */ 
    int     nphases = 3*(N-1);

    plhs[0] = mxCreateSparse(nphases,nphases,nzmax,false);

    double*  jacobian_values      = mxGetPr(plhs[0]);
    mwIndex* jacobian_row_indices = mxGetIr(plhs[0]);
    mwIndex* jacobian_jc          = mxGetJc(plhs[0]);
    
    /* get a pointer to the real data in the output matrix */


  
    int     nnz = nzmax; // number of nonzero's
    mwIndex row_indices[]   = {0, 1, 2, 3, 4, 5, 1, 2, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 4, 5, 7, 8, 0, 1, 2, 3, 4, 5, 6, 7, 8, 3, 4, 5, 6, 7, 8, 9, 10, 11, 4, 5, 7, 8, 10, 11, 3, 4, 5, 6, 7, 8, 9, 10, 11, 6, 7, 8, 9, 10, 11, 12, 13, 14, 7, 8, 10, 11, 13, 14, 6, 7, 8, 9, 10, 11, 12, 13, 14, 9, 10, 11, 12, 13, 14, 15, 16, 17, 10, 11, 13, 14, 16, 17, 9, 10, 11, 12, 13, 14, 15, 16, 17, 12, 13, 14, 15, 16, 17, 18, 19, 20, 13, 14, 16, 17, 19, 20, 12, 13, 14, 15, 16, 17, 18, 19, 20, 15, 16, 17, 18, 19, 20, 21, 22, 23, 16, 17, 19, 20, 22, 23, 15, 16, 17, 18, 19, 20, 21, 22, 23, 18, 19, 20, 21, 22, 23, 24, 25, 26, 19, 20, 22, 23, 25, 26, 18, 19, 20, 21, 22, 23, 24, 25, 26, 21, 22, 23, 24, 25, 26, 27, 28, 29, 22, 23, 25, 26, 28, 29, 21, 22, 23, 24, 25, 26, 27, 28, 29, 24, 25, 26, 27, 28, 29, 30, 31, 32, 25, 26, 28, 29, 31, 32, 24, 25, 26, 27, 28, 29, 30, 31, 32, 27, 28, 29, 30, 31, 32, 33, 34, 35, 28, 29, 31, 32, 34, 35, 27, 28, 29, 30, 31, 32, 33, 34, 35, 30, 31, 32, 33, 34, 35, 36, 37, 38, 31, 32, 34, 35, 37, 38, 30, 31, 32, 33, 34, 35, 36, 37, 38, 33, 34, 35, 36, 37, 38, 39, 40, 41, 34, 35, 37, 38, 40, 41, 33, 34, 35, 36, 37, 38, 39, 40, 41, 36, 37, 38, 39, 40, 41, 42, 43, 44, 37, 38, 40, 41, 43, 44, 36, 37, 38, 39, 40, 41, 42, 43, 44, 39, 40, 41, 42, 43, 44, 45, 46, 47, 40, 41, 43, 44, 46, 47, 39, 40, 41, 42, 43, 44, 45, 46, 47, 42, 43, 44, 45, 46, 47, 48, 49, 50, 43, 44, 46, 47, 49, 50, 42, 43, 44, 45, 46, 47, 48, 49, 50, 45, 46, 47, 48, 49, 50, 51, 52, 53, 46, 47, 49, 50, 52, 53, 45, 46, 47, 48, 49, 50, 51, 52, 53, 48, 49, 50, 51, 52, 53, 54, 55, 56, 49, 50, 52, 53, 55, 56, 48, 49, 50, 51, 52, 53, 54, 55, 56, 51, 52, 53, 54, 55, 56, 57, 58, 59, 52, 53, 55, 56, 58, 59, 51, 52, 53, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 55, 56, 58, 59, 61, 62, 54, 55, 56, 57, 58, 59, 60, 61, 62, 57, 58, 59, 60, 61, 62, 63, 64, 65, 58, 59, 61, 62, 64, 65, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 66, 67, 68, 61, 62, 64, 65, 67, 68, 60, 61, 62, 63, 64, 65, 66, 67, 68, 63, 64, 65, 66, 67, 68, 69, 70, 71, 64, 65, 67, 68, 70, 71, 63, 64, 65, 66, 67, 68, 69, 70, 71, 66, 67, 68, 69, 70, 71, 72, 73, 74, 67, 68, 70, 71, 73, 74, 66, 67, 68, 69, 70, 71, 72, 73, 74, 69, 70, 71, 72, 73, 74, 75, 76, 77, 70, 71, 73, 74, 76, 77, 69, 70, 71, 72, 73, 74, 75, 76, 77, 72, 73, 74, 75, 76, 77, 78, 79, 80, 73, 74, 76, 77, 79, 80, 72, 73, 74, 75, 76, 77, 78, 79, 80, 75, 76, 77, 78, 79, 80, 81, 82, 83, 76, 77, 79, 80, 82, 83, 75, 76, 77, 78, 79, 80, 81, 82, 83, 78, 79, 80, 81, 82, 83, 84, 85, 86, 79, 80, 82, 83, 85, 86, 78, 79, 80, 81, 82, 83, 84, 85, 86, 81, 82, 83, 84, 85, 86, 87, 88, 89, 82, 83, 85, 86, 88, 89, 81, 82, 83, 84, 85, 86, 87, 88, 89, 84, 85, 86, 87, 88, 89, 90, 91, 92, 85, 86, 88, 89, 91, 92, 84, 85, 86, 87, 88, 89, 90, 91, 92, 87, 88, 89, 90, 91, 92, 93, 94, 95, 88, 89, 91, 92, 94, 95, 87, 88, 89, 90, 91, 92, 93, 94, 95, 90, 91, 92, 93, 94, 95, 96, 97, 98, 91, 92, 94, 95, 97, 98, 90, 91, 92, 93, 94, 95, 96, 97, 98, 93, 94, 95, 96, 97, 98, 99, 100, 101, 94, 95, 97, 98, 100, 101, 93, 94, 95, 96, 97, 98, 99, 100, 101, 96, 97, 98, 99, 100, 101, 102, 103, 104, 97, 98, 100, 101, 103, 104, 96, 97, 98, 99, 100, 101, 102, 103, 104, 99, 100, 101, 102, 103, 104, 105, 106, 107, 100, 101, 103, 104, 106, 107, 99, 100, 101, 102, 103, 104, 105, 106, 107, 102, 103, 104, 105, 106, 107, 108, 109, 110, 103, 104, 106, 107, 109, 110, 102, 103, 104, 105, 106, 107, 108, 109, 110, 105, 106, 107, 108, 109, 110, 111, 112, 113, 106, 107, 109, 110, 112, 113, 105, 106, 107, 108, 109, 110, 111, 112, 113, 108, 109, 110, 111, 112, 113, 114, 115, 116, 109, 110, 112, 113, 115, 116, 108, 109, 110, 111, 112, 113, 114, 115, 116, 111, 112, 113, 114, 115, 116, 117, 118, 119, 112, 113, 115, 116, 118, 119, 111, 112, 113, 114, 115, 116, 117, 118, 119, 114, 115, 116, 117, 118, 119, 120, 121, 122, 115, 116, 118, 119, 121, 122, 114, 115, 116, 117, 118, 119, 120, 121, 122, 117, 118, 119, 120, 121, 122, 123, 124, 125, 118, 119, 121, 122, 124, 125, 117, 118, 119, 120, 121, 122, 123, 124, 125, 120, 121, 122, 123, 124, 125, 126, 127, 128, 121, 122, 124, 125, 127, 128, 120, 121, 122, 123, 124, 125, 126, 127, 128, 123, 124, 125, 126, 127, 128, 129, 130, 131, 124, 125, 127, 128, 130, 131, 123, 124, 125, 126, 127, 128, 129, 130, 131, 126, 127, 128, 129, 130, 131, 132, 133, 134, 127, 128, 130, 131, 133, 134, 126, 127, 128, 129, 130, 131, 132, 133, 134, 129, 130, 131, 132, 133, 134, 135, 136, 137, 130, 131, 133, 134, 136, 137, 129, 130, 131, 132, 133, 134, 135, 136, 137, 132, 133, 134, 135, 136, 137, 138, 139, 140, 133, 134, 136, 137, 139, 140, 132, 133, 134, 135, 136, 137, 138, 139, 140, 135, 136, 137, 138, 139, 140, 141, 142, 143, 136, 137, 139, 140, 142, 143, 135, 136, 137, 138, 139, 140, 141, 142, 143, 138, 139, 140, 141, 142, 143, 144, 145, 146, 139, 140, 142, 143, 145, 146, 138, 139, 140, 141, 142, 143, 144, 145, 146, 141, 142, 143, 144, 145, 146, 147, 148, 149, 142, 143, 145, 146, 148, 149, 141, 142, 143, 144, 145, 146, 147, 148, 149, 144, 145, 146, 147, 148, 149, 150, 151, 152, 145, 146, 148, 149, 151, 152, 144, 145, 146, 147, 148, 149, 150, 151, 152, 147, 148, 149, 150, 151, 152, 153, 154, 155, 148, 149, 151, 152, 154, 155, 147, 148, 149, 150, 151, 152, 153, 154, 155, 150, 151, 152, 153, 154, 155, 156, 157, 158, 151, 152, 154, 155, 157, 158, 150, 151, 152, 153, 154, 155, 156, 157, 158, 153, 154, 155, 156, 157, 158, 159, 160, 161, 154, 155, 157, 158, 160, 161, 153, 154, 155, 156, 157, 158, 159, 160, 161, 156, 157, 158, 159, 160, 161, 162, 163, 164, 157, 158, 160, 161, 163, 164, 156, 157, 158, 159, 160, 161, 162, 163, 164, 159, 160, 161, 162, 163, 164, 165, 166, 167, 160, 161, 163, 164, 166, 167, 159, 160, 161, 162, 163, 164, 165, 166, 167, 162, 163, 164, 165, 166, 167, 168, 169, 170, 163, 164, 166, 167, 169, 170, 162, 163, 164, 165, 166, 167, 168, 169, 170, 165, 166, 167, 168, 169, 170, 171, 172, 173, 166, 167, 169, 170, 172, 173, 165, 166, 167, 168, 169, 170, 171, 172, 173, 168, 169, 170, 171, 172, 173, 174, 175, 176, 169, 170, 172, 173, 175, 176, 168, 169, 170, 171, 172, 173, 174, 175, 176, 171, 172, 173, 174, 175, 176, 177, 178, 179, 172, 173, 175, 176, 178, 179, 171, 172, 173, 174, 175, 176, 177, 178, 179, 174, 175, 176, 177, 178, 179, 180, 181, 182, 175, 176, 178, 179, 181, 182, 174, 175, 176, 177, 178, 179, 180, 181, 182, 177, 178, 179, 180, 181, 182, 183, 184, 185, 178, 179, 181, 182, 184, 185, 177, 178, 179, 180, 181, 182, 183, 184, 185, 180, 181, 182, 183, 184, 185, 186, 187, 188, 181, 182, 184, 185, 187, 188, 180, 181, 182, 183, 184, 185, 186, 187, 188, 183, 184, 185, 186, 187, 188, 189, 190, 191, 184, 185, 187, 188, 190, 191, 183, 184, 185, 186, 187, 188, 189, 190, 191, 186, 187, 188, 189, 190, 191, 192, 193, 194, 187, 188, 190, 191, 193, 194, 186, 187, 188, 189, 190, 191, 192, 193, 194, 189, 190, 191, 192, 193, 194, 195, 196, 197, 190, 191, 193, 194, 196, 197, 189, 190, 191, 192, 193, 194, 195, 196, 197, 192, 193, 194, 195, 196, 197, 198, 199, 200, 193, 194, 196, 197, 199, 200, 192, 193, 194, 195, 196, 197, 198, 199, 200, 195, 196, 197, 198, 199, 200, 201, 202, 203, 196, 197, 199, 200, 202, 203, 195, 196, 197, 198, 199, 200, 201, 202, 203, 198, 199, 200, 201, 202, 203, 204, 205, 206, 199, 200, 202, 203, 205, 206, 198, 199, 200, 201, 202, 203, 204, 205, 206, 201, 202, 203, 204, 205, 206, 207, 208, 209, 202, 203, 205, 206, 208, 209, 201, 202, 203, 204, 205, 206, 207, 208, 209, 204, 205, 206, 207, 208, 209, 210, 211, 212, 205, 206, 208, 209, 211, 212, 204, 205, 206, 207, 208, 209, 210, 211, 212, 207, 208, 209, 210, 211, 212, 213, 214, 215, 208, 209, 211, 212, 214, 215, 207, 208, 209, 210, 211, 212, 213, 214, 215, 210, 211, 212, 213, 214, 215, 216, 217, 218, 211, 212, 214, 215, 217, 218, 210, 211, 212, 213, 214, 215, 216, 217, 218, 213, 214, 215, 216, 217, 218, 219, 220, 221, 214, 215, 217, 218, 220, 221, 213, 214, 215, 216, 217, 218, 219, 220, 221, 216, 217, 218, 219, 220, 221, 217, 218, 220, 221, 216, 217, 218, 219, 220, 221, };
    for (int i = 0; i < nnz; i++) {
      jacobian_row_indices[i] = row_indices[i];
    }
    // mexPrintf("jacobian row indices[1]