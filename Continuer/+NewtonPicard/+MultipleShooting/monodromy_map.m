%
% i:                index of shooting-point from where to start
% phases_0:         vector to which the monodromy map is applied
% time_interval:    length of the time interval for time integration
% parameters:       cell array of parameters for the jacobian of the ode
function Mx  = monodromy_map(i, phases_0, time_interval, parameters, ...
                                              abs_tol, rel_tol)
  global cds contopts
  if nargin == 4
    abs_tol = contopts.integration_abs_tol;
    rel_tol = contopts.integration_rel_tol;
  elseif nargin ~= 6
    error( ['The number of input arguments to ' ...
      'NewtonPicard.MultipleShooting.monodromy_map is not correct.\n' ...
      'The number of input arguments should be either 4 or 6.\n' ...
      'The actual number of input arguments is %d.\n'], nargin);
  end
  int_opt = odeset(...
    'AbsTol',       abs_tol,    ...
    'RelTol',       rel_tol,    ...
    'Jacobian',     @(t,y) feval(cds.jacobian_ode, ...
                      t, deval(cds.orbits(i),t), parameters{:}) ...
  );

  dydt_mon = @(t, y) ...
    cds.jacobian_ode(t, deval(cds.orbits(i), t), parameters{:}) * y;
  
  [~,orbit] = cds.integrator(...
    dydt_mon, [0 time_interval], phases_0, int_opt);
  
  Mx = orbit(end,:)';
end