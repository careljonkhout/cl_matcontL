function multipliers = compute_multipliers(x, nMults_to_compute)
  global cds contopts;
  print_diag(3,'computing multipliers\n');
  [phases, period, parameters] = ...
    NewtonPicard.SingleShooting.extract_phases_period_and_parameters(x);
  
  integration_opt = odeset(...
    'AbsTol',      contopts.multipliers_abs_tol,    ...
    'RelTol',      contopts.multipliers_rel_tol     ...
  );
  if ~ isempty(cds.jacobian_ode)
    integration_opt = odeset(integration_opt, ...
          'Jacobian',     @(t,y) feval(cds.jacobian_ode,t,y,parameters{:}));
  end
  
  cds.cycle_orbit = cds.integrator(...
       @(t, y) cds.dydt_ode(t, y, parameters{:}), ...
       [0 period], ...
       phases(:,1), ...
       integration_opt);
 
  
  monodromy_map = @(x) NewtonPicard.SingleShooting.monodromy_map( ...
                        x, period, parameters, ...
                        contopts.multipliers_abs_tol, ...
                        contopts.multipliers_rel_tol);
  
  [~, multiplier_matrix, no_convergence] = eigs(monodromy_map, cds.nphases, ...
                                                nMults_to_compute);
  multipliers = diag(multiplier_matrix);
  
  if no_convergence
    print_diag(2, 'multipliers did not converge\n');
    return
  end
  
  print_diag(1, multipliers2str(multipliers));
end