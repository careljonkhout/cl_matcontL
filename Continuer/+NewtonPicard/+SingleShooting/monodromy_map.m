function Mx = monodromy_map(x, period, parameters, abs_tol, rel_tol)
  global cds contopts
  
  if nargin == 3
    abs_tol = contopts.integration_abs_tol;
    rel_tol = contopts.integration_rel_tol;
  elseif nargin ~= 5
    error( ['The number of input arguments to ' ...
      'NewtonPicard.SingleShooting.monodromy_map is not correct.\n' ...
      'The number of input arguments should be either 3 or 5.\n' ...
      'The actual number of input arguments is %d.\n'], nargin);
  end
  
  cds.mv_count = cds.mv_count + 1;
  int_opt = odeset(...
    'AbsTol',       abs_tol, ...
    'RelTol',       rel_tol, ...
    'Jacobian',     @(t,y) feval(cds.jacobian_ode, ...
                      t, deval(cds.cycle_orbit,t), parameters{:}) ...
  );                
  dydt_mon = @(t, y) ...
    cds.jacobian_ode(t, deval(cds.cycle_orbit,t), parameters{:}) * y;
  [~,orbit] = cds.integrator(dydt_mon, [0 period], x, int_opt);
  Mx = orbit(end,:)';