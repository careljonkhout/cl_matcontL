function out = SEI_max_ord_3
out{1} = @init;
out{2} = @fun_eval;
out{3} = @jacobian;
out{4} = @jacobian_params;
out{5} = @hessians;
out{6} = @hessians_params;
out{7} = @third_order_derivatives;
out{8} = [];
out{9} = [];
out{10} = [];% usernorm DV: this is the only difference between
% the standard matcont problem file and the cl_matcontL problem file
out{11}= @x1;
out{12}= @x2;
out{13}= @x3;
out{14}= @x4;
out{15}= @x5;

% Suppress function might not be used warning in this file:
%#ok<*DEFNU>
% Suppress Input argument might be unused warnings in this file: 
%#ok<*INUSD>
%#ok<*INUSL>

% --------------------------------------------------------------------------
function dydt = fun_eval(t,y, par_alpha, par_beta, par_mu, par_delta, par_gamma)
dydt =[
  par_mu - par_mu * y(1) - par_beta*(1 + par_delta * y(4)) * y(1) * y(3);
  par_beta*(1+par_delta*y(3)) *y(1)*y(3) - (par_mu + par_alpha)*y(2);
  par_alpha*y(2) - (par_mu+par_gamma)*y(3);
  y(4)-2*pi*y(5) - (y(4)^2+y(5)^2)*y(4);
  2* pi * y(4) + y(5) - (y(4)^2+y(5)^2)*y(5)];
% --------------------------------------------------------------------------
function options = init()
handles = feval(SEI_max_ord_3);
options = odeset(...
  'Jacobian', handles(3), 'JacobianP', handles(4), ...
  'Hessians', handles(5), 'HessiansP', handles(6));

% --------------------------------------------------------------------------
function jac = jacobian(t, y, par_alpha, par_beta, par_mu, par_delta, par_gamma)
jac = reshape([-par_mu-par_beta.*y(3).*(par_delta.*y(4)+1.0),par_beta.*y(3).*(par_delta.*y(3)+1.0),0.0,0.0,0.0,0.0,-par_alpha-par_mu,par_alpha,0.0,0.0,-par_beta.*y(1).*(par_delta.*y(4)+1.0),par_beta.*y(1).*(par_delta.*y(3)+1.0)+par_beta.*par_delta.*y(3).*y(1),-par_gamma-par_mu,0.0,0.0,-par_beta.*par_delta.*y(3).*y(1),0.0,0.0,y(4).^2.*-3.0-y(5).^2+1.0,pi.*2.0-y(4).*y(5).*2.0,0.0,0.0,0.0,pi.*-2.0-y(4).*y(5).*2.0,-y(4).^2-y(5).^2.*3.0+1.0],[5,5]);
% --------------------------------------------------------------------------
function jacp=jacobian_params(t, y, par_alpha, par_beta, par_mu, par_delta, par_gamma)
jacp = reshape([0.0,-y(2),y(2),0.0,0.0,-y(3).*y(1).*(par_delta.*y(4)+1.0),y(3).*y(1).*(par_delta.*y(3)+1.0),0.0,0.0,0.0,-y(1)+1.0,-y(2),-y(3),0.0,0.0,-par_beta.*y(3).*y(1).*y(4),par_beta.*y(3).^2.*y(1),0.0,0.0,0.0,0.0,0.0,-y(3),0.0,0.0],[5,5]);
% --------------------------------------------------------------------------
function hess = hessians(t, y, par_alpha, par_beta, par_mu, par_delta, par_gamma)
hess = reshape([0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-par_beta.*(par_delta.*y(4)+1.0),par_beta.*(par_delta.*y(3)+1.0)+par_beta.*par_delta.*y(3),0.0,0.0,0.0,-par_beta.*par_delta.*y(3),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-par_beta.*(par_delta.*y(4)+1.0),par_beta.*(par_delta.*y(3)+1.0)+par_beta.*par_delta.*y(3),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,par_beta.*par_delta.*y(1).*2.0,0.0,0.0,0.0,-par_beta.*par_delta.*y(1),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-par_beta.*par_delta.*y(3),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-par_beta.*par_delta.*y(1),0.0,0.0,0.0,0.0,0.0,0.0,0.0,y(4).*-6.0,y(5).*-2.0,0.0,0.0,0.0,y(5).*-2.0,y(4).*-2.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,y(5).*-2.0,y(4).*-2.0,0.0,0.0,0.0,y(4).*-2.0,y(5).*-6.0],[5,5,5]);
% --------------------------------------------------------------------------
function hessp = hessians_params(t, y, par_alpha, par_beta, par_mu, par_delta, par_gamma)
hessp = reshape([0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-y(3).*y(1).*y(4),y(3).^2.*y(1),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-y(3).*y(1).*y(4),y(3).^2.*y(1),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],[5,5,5]);
%---------------------------------------------------------------------------
function d = third_order_derivatives(t, y, par_alpha, par_beta, par_mu, par_delta, par_gamma)
d = reshape([0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,par_beta.*par_delta.*2.0,0.0,0.0,0.0,-par_beta.*par_delta,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-par_beta.*par_delta,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,par_beta.*par_delta.*2.0,0.0,0.0,0.0,-par_beta.*par_delta,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,par_beta.*par_delta.*2.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-par_beta.*par_delta,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-par_beta.*par_delta,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-par_beta.*par_delta,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-6.0,0.0,0.0,0.0,0.0,0.0,-2.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-2.0,0.0,0.0,0.0,-2.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-2.0,0.0,0.0,0.0,-2.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-2.0,0.0,0.0,0.0,0.0,0.0,-6.0],[5,5,5,5]);
%---------------------------------------------------------------------------
function d = fourth_order_derivatives(t, y, par_alpha, par_beta, par_mu, par_delta, par_gamma)
d = [];
%---------------------------------------------------------------------------
function d = fifth_order_derivatives(t, y, par_alpha, par_beta, par_mu, par_delta, par_gamma)
d = [];

function userfun1=x1(t, y, par_alpha, par_beta, par_mu, par_delta, par_gamma)
	userfun1=0;
function userfun2=x2(t, y, par_alpha, par_beta, par_mu, par_delta, par_gamma)
	userfun2=0;
function userfun3=x3(t, y, par_alpha, par_beta, par_mu, par_delta, par_gamma)
	userfun3=0;
function userfun4=x4(t, y, par_alpha, par_beta, par_mu, par_delta, par_gamma)
	userfun4=0;
function userfun5=x5(t, y, par_alpha, par_beta, par_mu, par_delta, par_gamma)
	userfun5=0;
