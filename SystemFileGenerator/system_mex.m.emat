function out = <%= s.name %>_mex
out{1} = @init;
out{2} = @<%= s.name %>_dydt;
out{3} = <%= s.jacobian_handle %>;
out{4} = <%= s.jacobian_params_handle %>;
out{5} = <%= s.hessians_handle %>;
out{6} = <%= s.hessians_params_handle %>;
out{7} = <%= s.third_order_derivatives_handle %>;
out{8} = <%= s.fourth_order_derivatives_handle %>;
out{9} = <%= s.fifth_order_derivatives_handle %>;
out{10} = [];% usernorm DV: this is the only difference between
% the standard matcont problem file and the cl_matcontL problem file
out{11}= @x1;
out{12}= @x2;
out{13}= @x3;
out{14}= @x4;
out{15}= @x5;

% Suppress function might not be used warning in this file:
%#ok<*DEFNU>
% Suppress Input argument might be unused warnings in this file: 
%#ok<*INUSD>
%#ok<*INUSL>

% --------------------------------------------------------------------------
function options = init()
handles = feval(<%= s.name %>);
options = odeset(...
  'Jacobian', handles(3), 'JacobianP', handles(4), ...
  'Hessians', handles(5), 'HessiansP', handles(6));



function userfun1=x1(t, y, <%= s.parameter_arguments %>)
	userfun1=0;
function userfun2=x2(t, y, <%= s.parameter_arguments %>)
	userfun2=0;
function userfun3=x3(t, y, <%= s.parameter_arguments %>)
	userfun3=0;
function userfun4=x4(t, y, <%= s.parameter_arguments %>)
	userfun4=0;
function userfun5=x5(t, y, <%= s.parameter_arguments %>)
	userfun5=0;
