// this file was generated by the system file generator of cl_matcontL

// this mex function computes the right hand side of system of ODEs called
//                       "<%= s.name %>"

#include <math.h>
#include "mex.h"

#define n_parameters <%= length(s.input_pars) %>
#define n_inputs     <%= length(s.input_pars) + 2 %>
#define n_outputs    1
#define system_size  <%= length(s.rhs) %>

#define input_t 0
#define input_y 1


void <%= s.name %>_dydt(double* y, double* parameters, double* dydt);

void mexFunction(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[]) {

  double parameters[n_parameters];  
  double *y;                      /* 1xN input matrix */
  size_t ncols;                   /* size of matrix */
  double *outMatrix;              /* output matrix */

  /* check for proper number of arguments */
  if(nrhs != n_inputs) {
    mexErrMsgIdAndTxt("<%= s.name %>_dydt:nrhs","Five inputs required.");
  }
  if(nlhs != n_outputs) {
    mexErrMsgIdAndTxt("<%=s.name %>_dydt:nlhs","One output required.");
  }


  if ( !mxIsDouble(prhs[input_y]) ) {
    mexErrMsgIdAndTxt("system_<%= s.name %>:not_double",
                      "Error: Input vector y is not a double.");
  }

  if ( mxGetNumberOfElements(prhs[input_y]) != system_size ) {
    mexErrMsgIdAndTxt("system_<%= s.name %>:wrong_size",
                     "Input vector y must have <%= length(s.rhs) %> elements.");
  }

  for ( int i = 0; i < n_parameters; i++ ) {
    if ( !mxIsDouble(prhs[i + 2]) ) {
      mexErrMsgIdAndTxt("<%= s.name %>_dydt:not_double",
                        "Error: one of the parameters is not a double");
    } else if ( mxIsComplex(prhs[i + 2]) ) {
      mexErrMsgIdAndTxt("<%= s.name %>_dydt:not_complex",
                        "Error: one of the parameters not a real number");
    } else if ( mxGetNumberOfElements(prhs[i + 2]) != 1 ) {
      mexErrMsgIdAndTxt("<%= s.name %>_dydt:notScalar",
                        "Error: one of the parameters is not scalar");
    } else {
      parameters[i] = mxGetScalar(prhs[i+2]);
    }
  }
    
    
  /* create a pointer to the real data in the input matrix  */
  #if MX_HAS_INTERLEAVED_COMPLEX
  y = mxGetDoubles(prhs[input_y]);
  #else
  y = mxGetPr(prhs[input_y]);
  #endif

  /* get dimensions of the input matrix */

  /* create the output matrix */
  plhs[0] = mxCreateDoubleMatrix(system_size, 1, mxREAL);

  /* get a pointer to the real data in the output matrix */
  #if MX_HAS_INTERLEAVED_COMPLEX
  outMatrix = mxGetDoubles(plhs[0]);
  #else
  outMatrix = mxGetPr(plhs[0]);
  #endif

  /* call the computational routine */
  <%= s.name %>_dydt(y,parameters,outMatrix);
    
}

void <%= s.name %>_dydt(double* y, double* parameters, double* dydt) {
<%= s.formatted_rhs %>
}