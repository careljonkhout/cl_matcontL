%% Continuation starting form a branching point of equilibria
% This example performs continuation of equilibrium curve starting from a
% branch point and continuing along the second branch.

function testbruss_BP1()

%% Set Options
opt = contset( ...
    'contL_LogFile',             1, ...
    'contL_DiagnosticsLevel',    1, ...
    'Backward',                  1, ...
    'InitStepsize',              2e-1, ...
    'MinStepsize',               1e-5, ...
    'MaxStepsize',               1e-0, ...
    'MaxCorrIters',              12, ...
    'MaxNewtonIters',            6, ...
    'FunTolerance',              1e-6, ...
    'VarTolerance',              1e-6, ...
    'contL_SmoothingAngle',      pi/30, ...
    'Singularities',             1, ...
    'Userfunctions',             0, ...
    'MaxNumPoints',              500, ...
    'CIS_SparseSolvers',         1, ...
    'CIS_NStableRef',            6, ...
    'CIS_MaxUnstable',           5, ...
    'CIS_Ric_Cayley_Shift',      10, ...
    'contL_EQ_BranchingMethod',  2, ...
    'Locators',                  [1 1 1], ...
    'TestPath',                  mfilename('fullpath'));

%% Load the struct s from the file Data/testbruss_BP0.mat
% s contains data about singularities and the first and last points of a
% previous continuation run
path_to_this_script = get_path;
BP0_file = fullfile(path_to_this_script, 'Data', 'testbruss_BP0.mat');
load(BP0_file, 's');

%% Select the third singularity from the data loaded from testbruss_U0.mat
ID = 3;
data = s(ID).data;

%% Initialize the continuation
% the init functions in cl_matcontL initialize the global variable cds, which is
% a struct contains information the continuer needs.
[x0,v0]                   = init_BP_EP_L(@brusselator_1d, [], [], [], data);

%% Continuation
[singularities, datafile] = contL(@equilibriumL,x0,v0,opt);

%% Plot results
x = loadPoint(datafile);
N = singularities(1).data.P0(1);

figure
hold on
title('testbruss\_BP1')
plot(x(2*N+1, :), x(1, :));

for singularity = singularities
  plot(x(2*N+1, singularity.index), x(1, singularity.index), 'r.');
  text(x(2*N+1, singularity.index), x(1, singularity.index), singularity.label);
end

xlabel 'l'
ylabel 'u(x=0)'